#!/usr/bin/env ruby

require_relative 'lib/105torus'
include Torus105

if ARGV.length != 7
    exit 84
end

argp = Argparse.new
argp.usage = <<EOF
USAGE
    ./105torus opt a0 a1 a2 a3 a4 n

DESCRIPTION
    opt       method option:
                  1 for the bisection method
                  2 for Newton's method
                  3 for the secant method
    a[0-4]    coefficients of the equation
    n         precision (the application of the polynomial to the solution should
              be smaller than 10^-n)
EOF

argp.add_arg(:opt) do |x|
    r = Integer x
    exit(84) unless (1..3).include? r
    r
end
argp.add_list(:a, 5) { |x| Integer x }
argp.add_arg(:p) { |x|
    r = Integer(x)
    exit(84) unless (0..40).include? r
    r
}

argp.parse_args!



pol = Polynom.new [argp.a0, argp.a1, argp.a2, argp.a3, argp.a4]

case argp.opt
when 1
    last = 0
    pol.bisection(s: 0.0, e: 1.0, p: argp.p) do |x|
        xprim = x.round(argp.p)
        if x == xprim
            puts "x = #{xprim}"
        else
            puts "x = %.#{argp.p}f" % [x]
        end
    end
when 2
    pol.newton(s: 0.5, p: argp.p) do |x|
        xprim = x.round(argp.p)
        if x == xprim
            puts "x = #{xprim}"
        else
            puts "x = %.#{argp.p}f" % [x]
        end
    end
when 3
    pol.secant(s: 0.0, e: 1.0, p: argp.p) do |x|
        xprim = x.round(argp.p)
        if x == xprim
            puts "x = #{xprim}"
        else
            puts "x = %.#{argp.p}f" % [x]
        end
    end
end
