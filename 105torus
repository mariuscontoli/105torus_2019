#!/usr/bin/env ruby

p = ARGV[0]

a = ARGV[1, 5]
p = Float(ARGV[6])
#a = [-1, 0, 6, -5, 1]

class Polynom
    def initialize coefs
        @coefs = coefs.map { |x| Float(x) }.reverse
        @degree = coefs.length - 1
    end
    def calculate x
        i = @degree + 1
        @coefs.reduce(0) { |r, v|
            i -= 1
            r + (v*(x**i))
        }
    end
    def bisection(s: 0.0, e: 1.0, p: 6)
        if (calculate(e) * calculate(s) <= 0)
            mid = (s + e)/2.0
            return if ((s - e).abs / (2 * mid.abs)) < 0.1**p
            #puts "between #{s} and #{e}: #{mid.round(p)}"
            puts "x = #{mid.round(p)}"
            bisection(s: s, e: mid, p: p)
            bisection(s: mid, e: e, p: p)
        end
    end
end

pol = Polynom.new a
pol.bisection(p: p)